# Author: Alfio Lazzaro (alfio.lazzaro@chem.uzh.ch), UZH, 2018
# Note: add optimization flags specific for your system (e.g. -xHost).

LIBXSMM  = /home/zito/libs/libxsmm
LIBXC    = /home/zito/libs/libxc
LIBINT   = /home/zito/libs
LIBELPA  = /home/zito/libs/elpa

CC       = cc
CPP      = 
FC       = mpiifort
LD       = mpiifort
AR       = ar -r
CPPFLAGS =
DFLAGS   = -D__MKL -D__FFTW3 -D__LIBXSMM \
	   -D__parallel -D__SCALAPACK \
	   -D__ELPA=201605 \
	   -D__LIBXC \
           -D__LIBINT -D__LIBINT_MAX_AM=5 -D__LIBDERIV_MAX_AM1=4 \
           -D__MAX_CONTR=4
CFLAGS   = $(DFLAGS) -O2 
FCFLAGS  = $(DFLAGS) -O2 -funroll-loops -fpp -free
FCFLAGS += -fp-model precise
FCFLAGS += -g -traceback
FCFLAGS += -I${MKLROOT}/include -I${MKLROOT}/include/fftw
FCFLAGS += -I$(LIBXSMM)/include
FCFLAGS += -I$(LIBXC)/include
FCFLAGS += -I$(LIBELPA)/include/elpa-2016.05.004/modules -I$(LIBELPA)/include/elpa-2016.05.004/elpa
LDFLAGS  = $(FCFLAGS) -static-intel
LDFLAGS_C = $(FCFLAGS) -static-intel -nofor_main
LIBS     = -L$(LIBELPA)/lib -lelpa
MKL_LIB  = ${MKLROOT}/lib/intel64
LIBS    += $(MKL_LIB)/libmkl_scalapack_lp64.a -Wl,--start-group \
	   $(MKL_LIB)/libmkl_intel_lp64.a ${MKL_LIB}/libmkl_sequential.a \
	   $(MKL_LIB)/libmkl_core.a \
           ${MKL_LIB}/libmkl_blacs_intelmpi_lp64.a -Wl,--end-group \
           -lpthread -lm
LIBS    += -L$(LIBXSMM)/lib -lxsmmf -lxsmm -ldl
LIBS    += -L$(LIBXC)/lib -lxcf03 -lxc
LIBS    += -L$(LIBINT)/lib -lderiv -lint -lstdc++

# Required due to memory leak that occurs if high optimisations are used
mp2_optimize_ri_basis.o: mp2_optimize_ri_basis.F
			 $(FC) -c $(subst O2,O0,$(FCFLAGS)) $<
